 {
  "title": "DevOps Engineer Expert AZ 400",
  "subtitle": "A master course designed for working professionals like you. Make your career soar with Loyal Bytes.",
  "heroImage": "/images/course-page/azure-hero-image.png",
  "heroBg": "/images/course-page/azure-hero-bg.png",
  "courseDetail": {
    "duration": "50 Hours",
    "certification": "AZ â€“ 400 and DevOps Engineer Expert",
    "batchInfo": "Weekend and weekdays batches available",
    "level": "200",
    "highlights": [
      {
        "icon": "user",
        "color": "orange",
        "heading": "Duration",
        "subheading": "50 Hours."
      },
      {
        "icon": "user ",
        "color": "orange",
        "heading": "Batch Days",
        "subheading": "Weekends & Weekdays"
      },
      {
        "icon": "user ",
        "color": "orange",
        "heading": "Learning mode",
        "subheading": "Group, One-to-One, Corporate Batches, Online Live Classrooms"
      },
      {
        "icon": "user",
        "color": "orange",
        "heading": "Passing score",
        "subheading": "700"
      }
    ],
    "bg": "blue",
    "displayImage": "/images/course-page/azure-hightlights-image.png",
    "description": [
      "Candidates for this exam should have advanced experience and knowledge of IT operations, including networking, virtualization, identity, security, business continuity, disaster recovery, data platforms, and governance. A professional in this role should manage how decisions in each area affect an overall solution. In addition, they should have experience in Azure administration, Azure development, and DevOps processes.",
      "Candidates for the DevOps Engineer Expert certification should have subject matter expertise working with people, processes, and technologies to continuously deliver business value.",
      "Responsibilities for this role include designing and implementing strategies for collaboration, code, infrastructure, source control, security, compliance, continuous integration, testing, delivery, monitoring, and feedback.",
      "A candidate for this certification must be familiar with both Azure administration and development and must be expert in at least one of these areas."
    ]
  },
  "idealFor": [
    "Candidates for this exam should have subject matter expertise working with people, processes, and technologies to continuously deliver business value.",
    "Responsibilities for this role include designing and implementing strategies for collaboration, code, infrastructure, source control, security, compliance, continuous integration, testing, delivery, monitoring, and feedback.",
    "A candidate for this exam must be familiar with both Azure administration and development and must be expert in at least one of these areas."
  ],
  "learningObjectives": "Create beautiful web flow. Learn how to migrate and host on Microsoft Azure",
  "modules": [
    {
      "title": "Module 1: DEVELOP AN INSTRUMENTATION STRATEGY (5-10%)",
      "submodules": [
        {
          "heading": "DESIGN AND IMPLEMENT LOGGING",
          "contents": [
            "Assess and configure a logging framework",
            "Design a log aggregation and storage strategy (e.g., azure storage)",
            "Design a log aggregation and query strategy (e.g., azure monitor, splunk, exabeam, logrhythm)",
            "Interrogate log analytics logs using basic kusto (kql) queries",
            "Manage access control to logs (workspace-centric/resource-centric)",
            "Integrate crash analytics (app center crashes, crashlytics)"
          ]
        },
        {
          "heading": "DESIGN AND IMPLEMENT TELEMETRY",
          "contents": [
            "Design and implement distributed tracing",
            "Inspect application performance indicators",
            "Inspect infrastructure performance indicators",
            "Define and measure key metrics (cpu, memory, disk, network)",
            "Implement alerts on key metrics (email, sms, webhooks, teams/slack)",
            "Integrate user analytics (e.g., application insights funnels, visual studio app center, testflight, google analytics)"
          ]
        },
        {
          "heading": "INTEGRATE LOGGING AND MONITORING SOLUTIONS",
          "contents": [
            "Configure and integrate container monitoring (Azure Monitor, Prometheus, etc.)",
            "Configure and integrate with monitoring tools (Azure Monitor Application Insights, Dynatrace, New Relic, Naggios, Zabbix)",
            "Create feedback loop from platform monitoring tools (e.g., Azure Diagnostics extension, Log Analytics agent, Azure Platform Logs, Event Grid)",
            "Manage Access control to the monitoring platform"
          ]
        }
      ]
    },
    {
      "title": "Module 2: DEVELOP A SITE RELIABILITY ENGINEERING (SRE) STRATEGY (5-10%)",
      "submodules": [
        {
          "heading": "DEVELOP AN ACTIONABLE ALERTING STRATEGY",
          "contents": [
            "Identify and recommend metrics on which to base alerts",
            "Implement alerts using appropriate metrics",
            "Implement alerts based on appropriate log messages",
            "Implement alerts based on application health checks",
            "Analyze combinations of metrics",
            "Develop communication mechanism to notify users of degraded systems",
            "Implement alerts for self-healing activities (e.g., scaling, failovers)"
          ]
        },
        {
          "heading": "DESIGN A FAILURE PREDICTION STRATEGY",
          "contents": [
            "Analyze behavior of system with regards to load and failure conditions",
            "Calculate when a system will fail under various conditions",
            "Measure baseline metrics for system",
            "Leverage application insights smart detection and dynamic thresholds in azure monitor"
          ]
        },
        {
          "heading": "DESIGN AND IMPLEMENT A HEALTH CHECK",
          "contents": [
            "Analyze system dependencies to determine which dependency should be included in health check",
            "Calculate healthy response timeouts based on slo for the service",
            "Design approach for partial health situations",
            "Design approach for piecemeal recovery (e.g., to improve recovery time objective strategies)",
            "Integrate health check with compute environment",
            "Implement different types of health checks (container liveness, startup, shutdown)"
          ]
        }
      ]
    },
    {
      "title": "Module 3: DEVELOP A SECURITY AND COMPLIANCE PLAN (10-15%)",
      "submodules": [
        {
          "heading": "DESIGN AN AUTHENTICATION AND AUTHORIZATION STRATEGY",
          "contents": [
            "Design an access solution (Azure AD Privileged Identity Management (PIM), Azure AD Conditional Access, MFA, Azure AD B2B, etc.)",
            "Implement Service Principals and Managed Identity",
            "Design an application access solution using Azure AD B2C",
            "Configure service connections"
          ]
        },
        {
          "heading": "DESIGN A SENSITIVE INFORMATION MANAGEMENT STRATEGY",
          "contents": [
            "Evaluate and configure vault solution (Azure Key Vault, Hashicorp Vault)",
            "Manage security certificates",
            "Design a secrets storage and retrieval strategy (keyvault secrets, github secrets, Azure Pipelines secrets)",
            "Formulate a plan for deploying secret files as part of a release"
          ]
        },
        {
          "heading": "DEVELOP SECURITY AND COMPLIANCE",
          "contents": [
            "Automate dependencies scanning for security (container scanning, OWASP)",
            "Automate dependencies scanning for compliance (licenses: MIT, GPL)",
            "Assess and report risks",
            "Design a source code compliance solution (e.g., github Code scanning   , github Secret scanning, pipeline-based scans, Git hooks, sonarqube, Dependabot, etc.)"
          ]
        },
        {
          "heading": "DESIGN GOVERNANCE ENFORCEMENT MECHANISMS",
          "contents": [
            "Implement Azure policies to enforce organizational requirements",
            "Implement container scanning (e.g., static scanning, malware, crypto mining)",
            "Design and implement Azure Container Registry Tasks",
            "Design break-the-glass strategy for responding to security incidents"
          ]
        }
      ]
    },
    {
      "title": "Module 4: MANAGE SOURCE CONTROL (10-15%)",
      "submodules": [
        {
          "heading": "DEVELOP A MODERN SOURCE CONTROL STRATEGY",
          "contents": [
            "Integrate/migrate disparate source control systems (e.g., github, azure repos)",
            "Design authentication strategies",
            "Design approach for managing large binary files (e.g., git lfs)",
            "Design approach for cross repository sharing (e.g., git sub-modules, packages)",
            "Implement workflow hooks",
            "Design approach for efficient code reviews (e.g., github code review assignments, schedule reminders, pull analytics)            "
          ]
        },
        {
          "heading": "PLAN AND IMPLEMENT BRANCHING STRATEGIES FOR THE SOURCE CODE",
          "contents": [
            "Define Pull Requests (PR) guidelines to enforce work item correlation",
            "Implement branch merging restrictions (e.g., branch policies, branch protections, manual, etc.)",
            "Define branch strategy (e.g., trunk based, feature branch, release branch, github flow)",
            "Design and implement a PR workflow (code reviews, approvals)",
            "Enforce static code analysis for code-quality consistency on PR"
          ]
        },
        {
          "heading": "CONFIGURE REPOSITORIES",
          "contents": [
            "Configure permissions in the source control repository",
            "Organize the repository with git-tags",
            "Plan for handling oversized repositories",
            "Plan for content recovery in all repository states",
            "Purge data from source control"
          ]
        },
        {
          "heading": "INTEGRATE SOURCE CONTROL WITH TOOLS",
          "contents": [
            "Integrate github with devops pipelines",
            "Integrate github with identity management solutions (Azure AD)",
            "Design for gitops",
            "Design for chatops",
            "Integrate source control artifacts for human consumption (e.g., Git changelog)",
            "Integrate github Codespaces"
          ]
        }
      ]
    },
    {
      "title": "Module 5: FACILITATE COMMUNICATION AND COLLABORATION (10-15%)",
      "submodules": [
        {
          "heading": "COMMUNICATE DEPLOYMENT AND RELEASE INFORMATION WITH BUSINESS STAKEHOLDERS",
          "contents": [
            "Create dashboards combining boards, pipelines (custom dashboards on Azure devops)",
            "Design a cost management communication strategy",
            "Integrate release pipeline with work item tracking (e.g., AZ devops, Jira, servicenow)",
            "Integrate github as repository with Azure Boards",
            "Communicate user analytics"
          ]
        },
        {
          "heading": "GENERATE DEVOPS PROCESS DOCUMENTATION",
          "contents": [
            "Design onboarding process for new employees",
            "Assess and document external dependencies (e.g., integrations, packages)",
            "Assess and document artifacts (version, release notes)"
          ]
        },
        {
          "heading": "AUTOMATE COMMUNICATION WITH TEAM MEMBERS",
          "contents": [
            "Integrate monitoring tools with communication platforms (e.g., teams, slack,dashboards)",
            "Notify stakeholders about key metrics, alerts, severity using communication and project management platforms (e.g., email, sms, slack, teams, servicenow, etc.)",
            "Integrate build and release with communication platforms (e.g., build fails, release fails)",
            "Integrate github pull request approvals via mobile apps"
          ]
        }
      ]
    },
    {
      "title": "Module 6: DEFINE AND IMPLEMENT CONTINUOUS INTEGRATION (20-25%)",
      "submodules": [
        {
          "heading": "DESIGN BUILD AUTOMATION",
          "contents": [
            "Integrate the build pipeline with external tools (e.g., d\tependency and security scanning, code coverage)",
            "Implement quality gates (e.g., code coverage, internationalization, peer review)",
            "Design a testing strategy (e.g., integration, load, fuzz, api, chaos)",
            "Integrate multiple tools (e.g., github actions, azure pipeline, jenkins)"
          ]
        },
        {
          "heading": "DESIGN A PACKAGE MANAGEMENT STRATEGY",
          "contents": [
            "Recommend package management tools (e.g. Github packages, azure artifacts, azure automation runbooks gallery, nuget, jfrog, artifactory)",
            "Design an azure artifacts implementation including linked feeds",
            "Design versioning strategy for code assets (e.g., semver, date based)",
            "Plan for assessing and updating and reporting package dependencies (github",
            "Automated security updates, nukeeper, greenkeeper)",
            "Design a versioning strategy for packages (e.g., semver, date based)",
            "Design a versioning strategy for deployment artifacts"
          ]
        },
        {
          "heading": "DESIGN AN APPLICATION INFRASTRUCTURE MANAGEMENT STRATEGY",
          "contents": [
            "Assess a configuration management mechanism for application infrastructure",
            "Define and enforce desired state configuration for environments"
          ]
        },
        {
          "heading": "IMPLEMENT A BUILD STRATEGY",
          "contents": [
            "Design and implement build agent infrastructure (include cost, tool selection, licenses, maintainability)",
            "Develop and implement build trigger rules",
            "Develop build pipelines",
            "Design build orchestration (products that are composed of multiple builds)",
            "Integrate configuration into build process",
            "Develop complex build scenarios (e.g., containerized agents, hybrid, gpu)"
          ]
        },
        {
          "heading": "MAINTAIN BUILD STRATEGY ",
          "contents": [
            "Monitor pipeline health (failure rate, duration, flaky tests)",
            "Optimize build (cost, time, performance, reliability)",
            "Analyze ci load to determine build agent configuration and capacity"
          ]
        },
        {
          "heading": "DESIGN A PROCESS FOR STANDARDIZING BUILDS ACROSS ORGANIZATION",
          "contents": [
            "Manage self-hosted build agents (VM templates, containerization, etc.)",
            "Create reuseable build subsystems (YAML templates, Task Groups, Variable Groups, etc.)"
          ]
        }
      ]
    },
    {
      "title": "Module 7: DEFINE AND IMPLEMENT A CONTINUOUS DELIVERY AND RELEASE MANAGEMENT STRATEGY (10-15%)",
      "submodules": [
        {
          "heading": "DEVELOP DEPLOYMENT SCRIPTS AND TEMPLATES",
          "contents": [
            "Recommend a deployment solution (e.g., github actions, azure pipelines, jenkins, circleci, etc.)",
            "Design and implement infrastructure as code (arm, terraform, powershell, cli)",
            "Develop application deployment process (container, binary, scripts)",
            "Develop database deployment process (migrations, data movement, etl)",
            "Integrate configuration management as part of the release process",
            "Develop complex deployments (iot, azure iot edge, mobile, app center, dr, multiregion, cdn, sovereign cloud, azure stack, etc.)"
          ]
        },
        {
          "heading": "IMPLEMENT AN ORCHESTRATION AUTOMATION SOLUTION",
          "contents": [
            "Combine release targets depending on release deliverable (e.g., infrastructure, code, assets, etc.)",
            "Design the release pipeline to ensure reliable order of dependency deployments",
            "Organize shared release configurations and process (yaml templates, variable groups, azure app configuration)",
            "Design and implement release gates and approval processes"
          ]
        },
        {
          "heading": "PLAN THE DEPLOYMENT ENVIRONMENT STRATEGY",
          "contents": [
            "Design a release strategy (blue/green, canary, ring)",
            "Implement the release strategy (using deployment slots, load balancer configurations, azure traffic manager, feature toggle, etc.)",
            "Select the appropriate desired state solution for a deployment environment (powershell dsc, chef, puppet, etc.)",
            "Plan for minimizing downtime during deployments (vip swap, load balancer, rolling deployments, etc.)",
            "Design a hotfix path plan for responding to high priority code fixes"
          ]
        }
      ]
    }
  ],
  "onCompletion": [
    "The bullets that follow each of the skills measured are intended to illustrate how we are assessing that skill. Related topics may be covered in the exam.",
    "Most questions cover features that are general availability (GA). The exam may contain questions on Preview features if those features are commonly used."
  ],
  "batches": [
    {
      "id": "",
      "days": "",
      "mode": "",
      "time": "",
      "duration": ""
    },
    {
      "id": "",
      "days": "",
      "mode": "",
      "time": "",
      "duration": ""
    },
    {
      "id": "",
      "days": "",
      "mode": "",
      "time": "",
      "duration": ""
    },
    {
      "id": "",
      "days": "",
      "mode": "",
      "time": "",
      "duration": ""
    },
    {
      "id": "",
      "days": "",
      "mode": "",
      "time": "",
      "duration": ""
    }
  ]
}